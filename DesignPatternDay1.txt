Q.1 There is a BNP(bank note press) that needs three different sizes of
papers s1, s2 and s3 to print money of the denominations 10, 100 and 1000
respectively. The BNP gives orders to the paper manufacturer by mentioning
one of the denominations, and the manufacturer supplies the corresponding
size of paper.
E.g. input ->100 â‡’ output-> s2 Implement this scenario using one of the
design patterns.
========================================================================
package com.q1;

public class CurrencyFactory {
	 
	
public static Object createCurrency( String size){
	if(size.equals("s1")) {
		return 100;
	}else if(size.equals("s2")) {
		return 200;
	}else if(size.equals("s3")) {
		return 1000;
	}else {
		  throw new UnsupportedOperationException("size not available");
	}
}
}
-------------------------------------------------------------
package com.q1;

public class FactoryPattern {
 public static void main(String []args) {
	 System.out.println(CurrencyFactory.createCurrency("s1" ));
	 System.out.println(CurrencyFactory.createCurrency("s2" ));
	 System.out.println(CurrencyFactory.createCurrency("s3" ));
	 System.out.println(CurrencyFactory.createCurrency("s4" ));
 }
}
---------------------------------------------------------------------
====================================================================
Q2 Explain Singleton Design Pattern with suitable examples.
The Singleton design pattern comes under the creational pattern type.It is one of the
most simple design pattern in terms of the modelling but on the other hand this is one of
the most controversial pattern in terms of complexity of usage.
Sometimes it is necessary that one and only one instance of a particular class exists in
the entire Java Virtual Machine. This is achieved through the Singleton design pattern .
The Singleton pattern is widely used and has proved its usability in designing software.
Although the pattern is not specific to Java, it has become a classic in Java
programming.

--------------------------------------------------------------------------------
public class Client {
public static void main(String[] args) {
//2 ways of creating object
//1. create new object using new operator + constructor e.g. new User()
//2. Using class name and decalring it static
MySingleton one = MySingleton.getUniqueInstance();
MySingleton two = MySingleton.getUniqueInstance();
User u1=new User();
User u2 = new User();
System.out.println(one==two);
System.out.println(u1==u2);
System.out.println(MySingletonWithEnum.INSTANCE);
}
}
class User{}
//class loading...
//eager loading/initialization
class MySingleton1{
private static MySingleton1 uniqueInstance = new MySingleton1();
public static MySingleton1 getUniqueInstance() {
return uniqueInstance;
}
}
//Lazy initialisation
class MySingleton{
private static volatile MySingleton uniqueInstance;
public static synchronized MySingleton getUniqueInstance() {
if(uniqueInstance==null)
uniqueInstance=new MySingleton();
return uniqueInstance;
}
}
//using enum
enum COLOR {R}
enum MySingletonWithEnum {
INSTANCE;
//private MySingletonWithEnum() { System.out.println("Here"); }
}
=========================================================

Q3 What is Eager initialization & Lazy initialization.
Eager initialization
If the program will always need an instance, or if the cost of creating the instance is not
too large in terms of time/resources, the programmer can switch to eager initialization,
which always creates an instance when the class is loaded into the JVM.
problems with Eager Loading:
1. Slows down application at startup
2. Wastes a lot of memory
----------------------------------------------------------------
1. Lazy initialization
The Singleton pattern is implemented by creating a class with a method that creates a
new instance of the object if one does not exist. If an instance already exists, it simply
returns a reference to that object. To make sure that the object cannot be instantiated
any other way, the constructor is made private. Although a Singleton can be
implemented as
a static instance, it can also be lazily constructed, requiring no memory or resources
until needed.
==============================================================================

